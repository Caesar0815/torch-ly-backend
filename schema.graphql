scalar JSON
scalar URL

input PositionSquareInput {
    point: PointInput!
    rot: Int
    size: Int
}

type PositionSquare {
    point: Point!
    rot: Int
    size: Int
}

type Character {
    pos: PositionSquare
    name: String
    token: URL!
    sheet: URL
    visible: Boolean
    players: [Player!]!
    id: ID!
}

type Player {
    name: String!
    id: ID!
    gm: Boolean
    characters: [Character!] #TODO Ausrufezeichen
}

type BackgroundLayer {
    layer: JSON!
}

input PointInput {
    x: Int!
    y: Int!
}

type Point {
    x: Int!
    y: Int!
}

type Arrow {
    start: Point!
    end: Point!
}

type Measurement {
    arrows: [Arrow!]!
    visibility: MeasurementVisibility
    player: Player
    id: ID!
}

type Map {
    name: String!
    selected: Boolean!
}

enum MeasurementVisibility {
    GM, All, Own
}

type FogOfWar {
    polygons: JSON!
}

type Query {
    allPlayers: [Player!]!
    totalPlayers: Int!
    getPlayerByID(id: ID!): Player
    me: Player

    allCharacters: [Character!]!
    totalCharacters: Int!
    getCharacterByID(id: ID!): Character

    allMeasurements: [Measurement!]!
    totalMeasurements: Int!
    getMeasurementsByID(id: ID!): Measurement

    getBackgroundLayer: BackgroundLayer!

    getFogOfWar: FogOfWar!

    getMaps: [Map!]!

    getMonsters: JSON!
}

type Mutation {
    addCharacter (name: String, token: URL!, pos: PositionSquareInput!, sheet: URL, visible: Boolean, players: [String!]!): Character!
    setCharacterRotationAndSize (id: String!, rot: Int!, size: Int!): Character!
    removeCharacter (id: String!): Boolean

    updateCharacterPosition (x: Int!, y: Int!, id: String!): Character!
    updateBackgroundLayer (layer: JSON!): BackgroundLayer!

    updateFogOfWar (json: JSON!): FogOfWar!

    loadMap(name: String!): BackgroundLayer!
    createMap(name: String!): [Map!]!
    deleteMap(name: String!): [Map!]!
}

type Subscription {
    updateCharacter: Character!
    updateBackgroundLayer: BackgroundLayer!
    updateFogOfWar: FogOfWar!
}
